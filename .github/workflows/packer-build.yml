name: Packer AMI Build and Share

on:
  push:
    branches:
      - main  # Trigger only after merging into the main branch

jobs:
  build-and-share-ami:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: rootpass
          MYSQL_DATABASE: ${{ secrets.DB_NAME }}
          MYSQL_USER: ${{ secrets.DB_USER }}
          MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }}
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'

    - name: Install MySQL Client
      run: sudo apt-get install mysql-client -y

    - name: Setup MySQL Database
      run: |
        mysql -h 127.0.0.1 -u root -prootpass -e "CREATE DATABASE IF NOT EXISTS ${{ secrets.DB_NAME }};"
        mysql -h 127.0.0.1 -u root -prootpass -e "CREATE USER IF NOT EXISTS '${{ secrets.DB_USER }}'@'localhost' IDENTIFIED BY '${{ secrets.DB_PASSWORD }}';"
        mysql -h 127.0.0.1 -u root -prootpass -e "GRANT ALL PRIVILEGES ON ${{ secrets.DB_NAME }}.* TO '${{ secrets.DB_USER }}'@'localhost';"
        mysql -h 127.0.0.1 -u root -prootpass -e "FLUSH PRIVILEGES;"

    - name: Install Node.js dependencies
      run: npm install

    - name: Create logs directory
      run: mkdir -p src/logs

    - name: Create .env file at project root
      run: |
        echo "PORT=${{ secrets.PORT }}" >> .env
        echo "DATABASE_NAME=${{ secrets.DB_NAME }}" >> .env
        echo "DATABASE_USER=${{ secrets.DB_USER }}" >> .env
        echo "DATABASE_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
        echo "DATABASE_HOST=${{ secrets.DB_HOST }}" >> .env
        echo "DATABASE_DIALECT=${{ secrets.DB_DIALECT }}" >> .env
        echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> .env
        echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
        echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> .env
        echo "STATSD_PORT=${{ secrets.STATSD_PORT }}" >> .env
        echo "SNS_TOPIC_ARN=${{ secrets.SNS_TOPIC_ARN }}" >> .env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
      working-directory: ./

    - name: Run Tests
      run: npm test

    - name: Setup AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.DEV_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.DEV_SECRET_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Install Packer
      run: |
        curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
        sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
        sudo apt-get update && sudo apt-get install packer

    - name: Initialize Packer
      run: packer init ./packer/templates
      working-directory: ./

    - name: Build AMI using Packer
      run: |
        packer build -machine-readable \
          -var "aws_access_key=${{ secrets.DEV_ACCESS_KEY }}" \
          -var "aws_secret_key=${{ secrets.DEV_SECRET_KEY }}" \
          -var "aws_region=${{ secrets.AWS_REGION }}" \
          -var "instance_type=${{ secrets.INSTANCE_TYPE }}" \
          -var "ami_name_prefix=${{ secrets.AMI_NAME_PREFIX }}" \
          -var "source_ami=${{ secrets.SOURCE_AMI }}" \
          ./packer/templates/node_app.pkr.hcl | tee build_output.txt
      env:
        PACKER_LOG: 1
      working-directory: ./

    - name: Debug build_output.txt
      run: cat build_output.txt

    - name: Extract AMI ID
      id: extract_ami
      run: |
        AMI_ID=$(grep 'artifact,0,id' build_output.txt | cut -d, -f6 | cut -d: -f2)
        echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV

    - name: Share AMI with DEMO Account
      run: |
        aws ec2 modify-image-attribute --image-id ${{ env.AMI_ID }} --launch-permission "Add=[{UserId='${{ secrets.DEMO_ACCOUNT_ID }}'}]"
      env:
        AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

 # Part 3: Refresh Auto Scaling Group in Demo Account
    - name: Setup AWS CLI for Demo
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.DEMO_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.DEMO_SECRET_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Create and Encode User Data
      run: |
        # Create the user data script with environment variables
        cat <<EOT > user_data.sh
        #!/bin/bash
        echo "PORT=${{ secrets.PORT }}" > /home/ubuntu/webapp/.env
        echo "DATABASE_NAME=${{ secrets.DB_NAME }}" >> /home/ubuntu/webapp/.env
        echo "DATABASE_USER=${{ secrets.DB_USER }}" >> /home/ubuntu/webapp/.env
        echo "DATABASE_PASSWORD=${{ secrets.DB_PASSWORD }}" >> /home/ubuntu/webapp/.env
        echo "DATABASE_HOST=${{ secrets.RDS_HOST }}" >> /home/ubuntu/webapp/.env
        echo "DATABASE_DIALECT=mysql" >> /home/ubuntu/webapp/.env
        echo "NODE_ENV=production" >> /home/ubuntu/webapp/.env
        echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> /home/ubuntu/webapp/.env
        echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> /home/ubuntu/webapp/.env
        echo "STATSD_PORT=8125" >> /home/ubuntu/webapp/.env
        echo "SNS_TOPIC_ARN=${{ secrets.SNS_TOPIC_ARN }}" >> /home/ubuntu/webapp/.env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> /home/ubuntu/webapp/.env

        # Configure webapp.service and log permissions
        if systemctl list-units --full -all | grep -Fq 'webapp.service'; then
          sudo systemctl enable webapp.service
          sudo systemctl daemon-reload
          sudo systemctl restart webapp.service
        fi

        sudo chmod 664 /home/ubuntu/webapp/src/logs/app.log
        sudo chown csye6225:csye6225 /home/ubuntu/webapp/src/logs/app.log

        sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
          -a fetch-config \
          -m ec2 \
          -c file:/opt/cloudwatch-config.json \
          -s
        EOT

        # Encode the user data script to base64
        base64 user_data.sh | tr -d '\n' > encoded_user_data.txt
        USER_DATA=$(cat encoded_user_data.txt)
        echo "ENCODED_USER_DATA=$USER_DATA" >> $GITHUB_ENV

    - name: Create New Launch Template Version in Demo
      run: |
        # Create a new launch template version with updated AMI, instance type, security groups, and user data
        aws ec2 create-launch-template-version \
          --launch-template-id ${{ secrets.LAUNCH_TEMPLATE_ID }} \
          --version-description "New version with updated AMI, security groups, and user data" \
          --launch-template-data "{
            \"ImageId\": \"${{ env.AMI_ID }}\",
            \"InstanceType\": \"${{ secrets.INSTANCE_TYPE }}\",
            \"SecurityGroupIds\": [\"${{ secrets.APP_SECURITY_GROUP_ID }}\", \"${{ secrets.LB_SECURITY_GROUP_ID }}\", \"${{ secrets.DB_SECURITY_GROUP_ID }}\"],
            \"KeyName\": \"${{ secrets.KEY_NAME }}\",
            \"UserData\": \"${{ env.ENCODED_USER_DATA }}\"
          }"

    - name: Get Latest Launch Template Version
      id: get_latest_version
      run: |
        LATEST_VERSION=$(aws ec2 describe-launch-templates \
          --launch-template-ids ${{ secrets.LAUNCH_TEMPLATE_ID }} \
          --query "LaunchTemplates[0].LatestVersionNumber" --output text)
        echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV

    - name: Update Auto Scaling Group to Use New Launch Template Version (Demo)
      run: |
        aws autoscaling update-auto-scaling-group \
          --auto-scaling-group-name ${{ secrets.ASG_NAME }} \
          --launch-template "LaunchTemplateId=${{ secrets.LAUNCH_TEMPLATE_ID }},Version=${{ env.LATEST_VERSION }}" \
          --desired-capacity 3

    - name: Trigger Instance Refresh in Auto Scaling Group (Demo)
      id: refresh_asg
      run: |
        REFRESH_ID=$(aws autoscaling start-instance-refresh \
          --auto-scaling-group-name ${{ secrets.ASG_NAME }} \
          --preferences '{"MinHealthyPercentage": 100}' \
          --query 'InstanceRefreshId' --output text)
        echo "REFRESH_ID=$REFRESH_ID" >> $GITHUB_ENV

    - name: Wait for Instance Refresh Completion (Demo)
      run: |
        STATUS="InProgress"
        while [ "$STATUS" == "InProgress" ]; do
          sleep 60
          STATUS=$(aws autoscaling describe-instance-refreshes \
            --auto-scaling-group-name ${{ secrets.ASG_NAME }} \
            --query "InstanceRefreshes[?InstanceRefreshId=='${{ env.REFRESH_ID }}'].Status" \
            --output text)
          echo "Current instance refresh status: $STATUS"
        done

        if [ "$STATUS" == "Successful" ]; then
          echo "Instance refresh completed successfully."
          exit 0
        else
          echo "Instance refresh failed with status: $STATUS"
          exit 1
        fi
