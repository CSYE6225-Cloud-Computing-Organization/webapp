name: Packer AMI Build and Share

on:
  push:
    branches:
      - main  # Trigger only after merging into the main branch

jobs:
  build-and-share-ami:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: rootpass
          MYSQL_DATABASE: ${{ secrets.DB_NAME }}
          MYSQL_USER: ${{ secrets.DB_USER }}
          MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }}
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'

    - name: Install MySQL Client
      run: sudo apt-get install mysql-client -y

    - name: Setup MySQL Database
      run: |
        mysql -h 127.0.0.1 -u root -prootpass -e "CREATE DATABASE IF NOT EXISTS ${{ secrets.DB_NAME }};"
        mysql -h 127.0.0.1 -u root -prootpass -e "CREATE USER IF NOT EXISTS '${{ secrets.DB_USER }}'@'localhost' IDENTIFIED BY '${{ secrets.DB_PASSWORD }}';"
        mysql -h 127.0.0.1 -u root -prootpass -e "GRANT ALL PRIVILEGES ON ${{ secrets.DB_NAME }}.* TO '${{ secrets.DB_USER }}'@'localhost';"
        mysql -h 127.0.0.1 -u root -prootpass -e "FLUSH PRIVILEGES;"

    - name: Install Node.js dependencies
      run: npm install

    - name: Create .env file at project root
      run: |
        echo "PORT=${{ secrets.PORT }}" >> .env
        echo "DATABASE_NAME=${{ secrets.DB_NAME }}" >> .env
        echo "DATABASE_USER=${{ secrets.DB_USER }}" >> .env
        echo "DATABASE_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
        echo "DATABASE_HOST=${{ secrets.DB_HOST }}" >> .env
        echo "DATABASE_DIALECT=${{ secrets.DB_DIALECT }}" >> .env
        echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> .env
      working-directory: ./

    - name: Run Tests
      run: npm test

    - name: Setup AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.DEV_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.DEV_SECRET_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Install Packer
      run: |
        curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
        sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
        sudo apt-get update && sudo apt-get install packer

    - name: Initialize Packer
      run: packer init ./packer/templates
      working-directory: ./

    - name: Build AMI using Packer
      run: |
        packer build -machine-readable \
          -var "aws_access_key=${{ secrets.DEV_ACCESS_KEY }}" \
          -var "aws_secret_key=${{ secrets.DEV_SECRET_KEY }}" \
          -var "aws_region=${{ secrets.AWS_REGION }}" \
          -var "instance_type=${{ secrets.INSTANCE_TYPE }}" \
          -var "ami_name_prefix=${{ secrets.AMI_NAME_PREFIX }}" \
          -var "source_ami=${{ secrets.SOURCE_AMI }}" \
          ./packer/templates/node_app.pkr.hcl | tee build_output.txt
      env:
        PACKER_LOG: 1
      working-directory: ./

    - name: Debug build_output.txt
      run: cat build_output.txt

    - name: Extract AMI ID
      id: extract_ami
      run: |
        AMI_ID=$(grep 'artifact,0,id' build_output.txt | cut -d, -f6 | cut -d: -f2)
        echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV

    - name: Share AMI with DEMO Account
      run: |
        aws ec2 modify-image-attribute --image-id ${{ env.AMI_ID }} --launch-permission "Add=[{UserId=${{ secrets.DEMO_ACCOUNT_ID }} }]"
      env:
        AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
